제네릭을 사용하는 이유는?

같은 행위를 하지만 매개변수, 타입 등이 달라서 클래스를 새로 만들어야 한다면 낭비가 크다.
이를 다형성을 통해 해결해보면 어떨까?

Object는 모든 타입의 부모이기 때문에 다형성을 사용해보자.
Object 사용시 직접 다운 캐스팅해야 한다. 또한 잘못된 타입의 인수를 전달한 경우 꺼낼때 문제가 발생한다.
-> Object 타입으로 다형성 사용시 코드 중복을 제거, 코드 재사용을 할 수 있지만 타입 안전성 문제가 발생한다.
--> 제네릭을 사용하면 코드 재사용과 타입 안전성 모두 해결 가능하다!

제네릭의 핵심은 사용할 타입을 미리 결정하지 않는다는 점이다.
클래스 내부에서 사용하는 타입을 클래스를 정의하는 시점에 결정하는 것이 아니라 실제 사용하는 생성 시점에 타입을 결정하는 것이다.

타입 매개변수: GenericBox<T> 에서 T
타입 인자: GenericBox<Integer>에서 Integer

- 타입 인자로 기본형은 사용할 수 없다.
(제네릭의 타입 인자로 기본형은 사용할 수 없고 래퍼 클래스를 사용하면 된다)
Integer, Double...등

제네릭에서 타입 매개변수를 사용하면 어떤 타입이든 들어올 수 있다.
하지만 타입 매개변수를 제한하고 싶으면 어떻게 해야할까???
-> ex) public class AnimalHospital<T extends Animal> {}
AnimalHospital클래스는 <T extends Animal>로 설정해 Animal과 그 자식만 들어올 수 있게 제한했다!!
즉 T의 상한이 Animal이 되는 것이다. Animal을 T의 타입으로 가정해도 문제가 없다.
따라서 제네릭 클래스에서 Animal이 제공하는 메서드 기능을 사용할 수 있다.

제네릭 메서드는 클래스 전체가 아니라 특정 메서드 단위로 제네릭을 도입할 때 사용한다.
이는 인스턴스 메서드와 static 메서드에 모두 적용할 수 있다.

ex) static <T> T staticMethod(T t) {}
<T> T instanceMethod(T t) {}

제네릭 메서드도 제네릭 타입과 마찬가지로 타입 매개변수를 제한할 수 있다.
ex) public static <T extends Number> T numberMethod(T t) {}

if) 제네릭 타입과 제네릭 메서드의 타입 매개변수를 같은 이름으로 사용하면 어떻게 될까?
-> 제네릭 메서드가 높은 우선순위를 가진다.

이번에는 제네릭 타입을 조금 더 편리하게 사용할 수 있는 와일드카드(wildcard)에 대해 알아보자
와일드카드는 제네릭 타입이나, 제네릭 메서드를 선언하는 것이 아니다. 이미 만들어진 제네릭 타입을 활용할 때 사용한다.
ex) static void printWildcardV1(Box<?> box) {}

제네릭 메서드 vs 와일드카드
제네릭 메서드에는 타입 매개변수가 존재한다. 그리고 특정 시점에 타입 매개변수에 타입 인자를 전달해서 타입을 결정해야 한다.
반면에 와일드카드는 일반적인 메서드에 사용할 수 있고, 단순히 매개변수로 제네릭 타입을 받을 수 있는 것 뿐이다.
제네릭 타입이나 제네릭 메서드를 정의하는게 꼭 필요한 상황이 아니라면, 더 단순한 와일드카드를 사용하자!

제네릭 메서드와 마찬가지로 와일드카드에도 상한 제한을 둘 수 있다.
static void printWildcardV2(Box<? extends Animal> box){}

와일드카드는 Box<Dog>, Box<Cat> 처럼 타입 인자가 전달된 제네릭 타입을 활용할 때 사용된다.

와일드카드는 상한 뿐만 아니라 하한도 지정할 수 있다.
ex) static void writeBox(Box<? super Animal> box) {}
?가 Animal 타입을 포함한 Animal 타입의 상위 타입만 입력 받을 수 있다는 뜻이다.


셋

set: 유일한 요소들의 컬렉션
set은 중복을 허용하지 않고, 순서를 보장하지 않는 자료 구조이다.
- 유일성, 순서 미보장, 빠른 검색

- add(value): 셋에 값을 추가한다. 중복 데이터는 저장하지 않는다.
- contains(value): 셋에 값이 있는지 확인한다.
- remove(value): 셋에 있는 값을 제거한다.

collection(interface) -> set(interface) -> HashSet -> Linked HashSet
                                        -> TreeSet

1. HashSet
구현: 해시 자료 구조를 사용해서 요소를 저장한다.
순서: 요소들은 특정한 순서 없이 저장된다.
시간 복잡도: 추가, 삭제, 검색은 평균적으로 O(1) 시간 복잡도
용도: 데이터의 유일성만 중요하고, 순서가 중요하지 않은 경우에 적합하다.

2. LinkedHashSet
구현: HashSet에 연결 리스트를 추가해서 요소들의 순서를 유지한다.
순서: 요소들은 추가된 순서대로 유지된다.
시간 복잡도: HashSet과 동일
용도: 데이터의 유일성과 함께 삽입 순서를 유지해야 할 때 적합
참고: 연결 링크를 유지해야 하기 때문에 HashSet보다는 조금 더 무겁다.

3. TreeSet
구현: 이진 탐색 트리를 개선한 레드-블랙 트리를 내부에서 사용한다.
순서: 요소들은 정렬된 순서로 저장된다. 순서의 기준은 비교자로 변경할 수 있다.
시간 복잡도: 주요 연산들은 O(log n), HashSet보다는 느리다.

실무에서는 set이 필요한 경우 HashSet을 가장 많이 사용한다.
입력 순서 유지, 값 정렬의 필요에 따라서 LinkedHashSet, TreeSet을 선택하면 된다.